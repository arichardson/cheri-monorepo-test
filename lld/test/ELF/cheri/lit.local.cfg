import pprint
import subprocess

import lit.util

config.name = 'lld'
config.suffixes = ['.test', '.s', '.ll', '.c', '.cpp']

# print 'CHERI'

# from tools/clang/lit.cfg
def getClangBuiltinIncludeDir(clang):
    # FIXME: Rather than just getting the version, we should have clang print
    # out its resource dir here in an easy to scrape form.
    cmd = subprocess.Popen([clang, '-print-file-name=include'],
                           stdout=subprocess.PIPE,
                           env=config.environment)
    if not cmd.stdout:
      lit_config.fatal("Couldn't find the include dir for Clang ('%s')" % clang)
    dir = cmd.stdout.read().strip()
    if sys.platform in ['win32'] and execute_external:
        # Don't pass dosish path separator to msys bash.exe.
        dir = dir.replace('\\', '/')
    # Ensure the result is an ascii string, across Python2.5+ - Python3.
    return str(dir.decode('ascii'))

def add_sub(value, replacement):
  config.substitutions.append( (value, replacement) )

def add_invalid_sub(sub, replacement):
  add_sub(' ' + sub + ' ', """*** Do not use '%s' in tests, use '%s'. ***""" %
          (sub, replacement) )

config.lld = lit.util.which('ld.lld', config.llvm_tools_dir)
config.clang = lit.util.which('clang', config.llvm_tools_dir)
if config.clang:
    if lit_config.debug:
        print 'Found clang:', config.clang
    config.available_features.add('clang')
    add_sub('%clang_cc1 ', '%s -cc1 -internal-isystem %s -nostdsysteminc ' %
            (config.clang, getClangBuiltinIncludeDir(config.clang)) )
    add_sub('%clangxx ', config.clang + ' --driver-mode=g++ ')
    add_sub('%clang_cheri_purecap ', config.clang + ' -nostdinc '
            '-target cheri-unknown-freebsd -msoft-float -mabi=purecap ')
    add_sub('%clang_link_purecap ', config.clang + ' -mabi=purecap '
            '-target cheri-unknown-freebsd -msoft-float -fuse-ld=' + config.lld +
            ' -nostdlib -Wl,-melf64btsmip_cheri_fbsd ')
    add_sub('%clang ', config.clang + ' ')
else:
    lit_config.warning('Could not find clang -> skipping most CHERI linker tests!')
cheri_lld_cmd_base = config.lld + ' --eh-frame-hdr --enable-new-dtags -melf64btsmip_cheri_fbsd '
# TODO: do we still need --no-warn-mismatch?
add_sub('%cheri_lld_shlib', cheri_lld_cmd_base + '-Bshareable ')
add_sub('%cheri_lld_static', cheri_lld_cmd_base + '-Bstatic ')
add_sub('%cheri_lld_dynamic_exe', cheri_lld_cmd_base +
        '-dynamic-linker /libexec/ld-cheri-elf.so.1 ')
# TODO: -pie and -pie -static

config.capsizefix = lit.util.which('capsizefix', config.llvm_tools_dir)
if config.capsizefix:
    print 'Found capsizefix:', config.capsizefix
    add_sub('%capsizefix ', config.capsizefix + ' ')

add_invalid_sub('clang', '%clang')
add_invalid_sub('clang\\+\\+', '%clangxx')
add_invalid_sub('clang -cc1', '%clang_cc1')

cheri_ld_bfd = os.getenv('CHERI_LD_BFD')
if cheri_ld_bfd and not os.path.isfile(cheri_ld_bfd):
    lit_config.warning('$CHERI_LD_BFD is not a valid file: ' + cheri_ld_bfd)
    cheri_ld_bfd = None
# If that is not set try falling back to finding ld.bfd in $CHERI_SDK or in $PATH
if not cheri_ld_bfd:
    path_to_check = None
    cheri_sdk_env = os.getenv('CHERI_SDK')
    if cheri_sdk_env:
        path_to_check = cheri_sdk_env + os.path.pathsep + os.path.join(cheri_sdk_env, "bin")
    cheri_ld_bfd = lit.util.which('ld.bfd', path_to_check)

# final fallback try to find it in PATH
if cheri_ld_bfd:
    lit_config.note('CHECKING ' + cheri_ld_bfd + ' for CHERI support')
    supported_emulations = lit.util.capture([cheri_ld_bfd, '-V'])
    if 'elf64btsmip_cheri_fbsd' in supported_emulations:
        config.available_features.add('cheri_ld_bfd')
        lit_config.note(cheri_ld_bfd + ' supports CHERI!')
        add_sub('%clang_link_purecap_bfd ', config.clang + ' -mabi=purecap '
                '-target cheri-unknown-freebsd -msoft-float -fuse-ld=' +
                cheri_ld_bfd + ' -nostdlib -Wl,-melf64btsmip_cheri_fbsd ')
    else:
        lit_config.note(cheri_ld_bfd + ' does not support CHERI.')
        cheri_ld_bfd = None

can_use_bigarreau_clang = False
bigarreau_clang = os.getenv("BIGARREAU_CLANG", "/home/alr48/cheri/output-old-compiler/sdk256/bin/clang")
if bigarreau_clang and os.path.isfile(bigarreau_clang):
    if lit_config.debug:
        print 'Found bigarreau clang:', bigarreau_clang
    bigarreau_clang_dir = os.path.dirname(bigarreau_clang)
    if os.path.isfile(os.path.join(bigarreau_clang_dir, 'brandelf')):
        can_use_bigarreau_clang = True
    else:
        lit_config.warning('bigarreau clang found in ' + bigarreau_clang_dir +
                           ' but brandelf is missing!')

if can_use_bigarreau_clang:
    config.available_features.add('bigarreau_clang')
    add_sub('%bigarreau_clang_cheri_purecap ', bigarreau_clang + ' -nostdinc '
            '-target cheri-unknown-freebsd -msoft-float -mabi=sandbox ')
    # clang 3.8 does not allow absolute paths to the linker so we need to
    # change $PATH to include the linker
    add_sub('%bigarreau_clang_link_lld ', "env PATH=" +
            os.path.dirname(config.lld) + ' ' + bigarreau_clang +
            ' -mabi=sandbox -target cheri-unknown-freebsd -msoft-float'
            ' -fuse-ld=lld -nostdlib -Wl,-melf64btsmip_cheri_fbsd -v ')
    if 'cheri_ld_bfd' in config.available_features:
            add_sub('%bigarreau_clang_link_bfd ', "env PATH=" +
                    os.path.dirname(cheri_ld_bfd) + ' ' + bigarreau_clang +
                    ' -mabi=sandbox -target cheri-unknown-freebsd'
                    ' -msoft-float -fuse-ld=bfd -nostdlib'
                    ' -Wl,-melf64btsmip_cheri_fbsd -v ')

if not cheri_ld_bfd:
    lit_config.warning('ld.bfd with CHERI support not found, consider setting '
                       '$CHERI_LD_BFD env var to point to it.')
    lit_config.note('Alternatively you can also set $CHERI_SDK to point to the '
                    'SDK root directory.')

# print 'after: '
# pprint.pprint(vars(config))
